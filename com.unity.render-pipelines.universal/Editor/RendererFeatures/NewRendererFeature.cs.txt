using UnityEngine;
using UnityEngine.Rendering;
using UnityEngine.Rendering.Universal;

public class #SCRIPTNAME# : ScriptableRendererFeature
{
    public RenderPassEvent WhenToInsert = RenderPassEvent.AfterRendering;
    public Material MaterialToUse;
    #SCRIPTNAME#RenderPass m_ScriptablePass;

    /// <inheritdoc/>
    public override void Create()
    {
        m_ScriptablePass = new #SCRIPTNAME#RenderPass(name, WhenToInsert, MaterialToUse);

        // Configures where the render pass should be injected.
        m_ScriptablePass.renderPassEvent = WhenToInsert;
    }

    // Here you can inject one or multiple render passes in the renderer.
    // This method is called when setting up the renderer once per-camera.
    public override void AddRenderPasses(ScriptableRenderer renderer, ref RenderingData renderingData)
    {
        if (!isActive || MaterialToUse == null)
        {
            return;
        }
        renderer.EnqueuePass(m_ScriptablePass);
    }
}

class #SCRIPTNAME#RenderPass : ScriptableRenderPass
{
    string profilerTag;
    Material materialToUse;

    public #SCRIPTNAME#RenderPass(string profilerTag, RenderPassEvent renderPassEvent, Material materialToUse)
    {
        this.profilerTag = profilerTag;
        this.renderPassEvent = renderPassEvent;
        this.materialToUse = materialToUse;
    }
    // This method is called before executing the render pass.
    // It can be used to configure render targets and their clear state. Also to create temporary render target textures.
    // When empty this render pass will render to the active camera render target.
    // You should never call CommandBuffer.SetRenderTarget. Instead call <c>ConfigureTarget</c> and <c>ConfigureClear</c>.
    // The render pipeline will ensure target setup and clearing happens in a performant manner.
    public override void OnCameraSetup(CommandBuffer cmd, ref RenderingData renderingData)
    {
    }

    // Here you can implement the rendering logic.
    // Use <c>ScriptableRenderContext</c> to issue drawing commands or execute command buffers
    // https://docs.unity3d.com/ScriptReference/Rendering.ScriptableRenderContext.html
    // You don't have to call ScriptableRenderContext.submit, the render pipeline will call it at specific points in the pipeline.
    public override void Execute(ScriptableRenderContext context, ref RenderingData renderingData)
    {
        CommandBuffer cmd = CommandBufferPool.Get(profilerTag);
        Camera cam = renderingData.cameraData.camera;

        cmd.SetViewProjectionMatrices(Matrix4x4.identity, Matrix4x4.identity);
        cmd.DrawMesh(RenderingUtils.fullscreenMesh, Matrix4x4.identity, materialToUse, 0, 0);
        cmd.SetViewProjectionMatrices(cam.worldToCameraMatrix, cam.projectionMatrix);

        context.ExecuteCommandBuffer(cmd);
        cmd.Clear();

        CommandBufferPool.Release(cmd);
    }

    // Cleanup any allocated resources that were created during the execution of this render pass.
    public override void OnCameraCleanup(CommandBuffer cmd)
    {
    }
}
