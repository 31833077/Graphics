#pragma only_renderers d3d11

#pragma kernel TemporalAccumulationFullRes TEMPORAL_ACCUMULATION=TemporalAccumulationFullRes
#pragma kernel TemporalAccumulationHalfRes TEMPORAL_ACCUMULATION=TemporalAccumulationHalfRes HALF_RESOLUTION
#pragma kernel CopyHistory
#pragma kernel BilateralFilterH_FR      BILATERAL_FILTER=BilateralFilterH_FR
#pragma kernel BilateralFilterV_FR      BILATERAL_FILTER=BilateralFilterV_FR    FINAL_PASS
#pragma kernel BilateralFilterH_HR      BILATERAL_FILTER=BilateralFilterH_HR    HALF_RESOLUTION  
#pragma kernel BilateralFilterV_HR      BILATERAL_FILTER=BilateralFilterV_HR    FINAL_PASS  HALF_RESOLUTION 

#pragma only_renderers d3d11

#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Common.hlsl"
#include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderVariables.hlsl"
#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/NormalBuffer.hlsl"
#include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/Raytracing/Shaders/RaytracingSampling.hlsl"
#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Color.hlsl"
#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Builtin/BuiltinData.hlsl"
#include "Packages/com.unity.render-pipelines.high-definition/Runtime/PostProcessing/Shaders/TemporalAntialiasing.hlsl"
#define BILATERAL_ROUGHNESS
#include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/Raytracing/Shaders/Denoising/BilateralFilter.hlsl"
#include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/Raytracing/Shaders/ShaderVariablesRaytracing.cs.hlsl"
#include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/Raytracing/Shaders/RayTracingCommon.hlsl"

// Tile size of this compute
#define REFLECTION_FILTER_TILE_SIZE 8

// #pragma enable_d3d11_debug_symbols

// Thereshold at which we decide to reject the reflection history
#define REFLECTION_HISTORY_REJECTION_THRESHOLD 0.75

// Input textures
TEXTURE2D_X(_DenoiseInputTexture);
TEXTURE2D_X(_HistoryBuffer);
// Value that tells us if the current history should be discarded based on scene-level data
float _HistoryValidity;
// Current inverse resolution of the history buffer
float2 _HistoryBufferSize;
// Resolution at which the effect is rendered (Half the _Screensize if half res)
float4 _CurrentEffectResolution;

// Output texture
RW_TEXTURE2D_X(float4, _DenoiseOutputTextureRW);

[numthreads(REFLECTION_FILTER_TILE_SIZE, REFLECTION_FILTER_TILE_SIZE, 1)]
void TEMPORAL_ACCUMULATION(uint3 dispatchThreadId : SV_DispatchThreadID, uint2 groupThreadId : SV_GroupThreadID, uint2 groupId : SV_GroupID)
{
    UNITY_XR_ASSIGN_VIEW_INDEX(dispatchThreadId.z);

    // Fetch the current pixel coordinate
    uint2 mainCoord = groupId * REFLECTION_FILTER_TILE_SIZE + groupThreadId;

    // The source coordinate for the normal and depth depends if we are in half res or not
    #ifdef HALF_RESOLUTION
    uint2 geometryCoords = ComputeSourceCoordinates(mainCoord, _RaytracingFrameIndex);
    #else
    uint2 geometryCoords = mainCoord;
    #endif

    // If the history is flagged as invalid, write the current value and leave right away
    if (_HistoryValidity == 0.0)
    {
        _DenoiseOutputTextureRW[COORD_TEXTURE2D_X(mainCoord)] = LOAD_TEXTURE2D_X(_DenoiseInputTexture, mainCoord);
        return;
    }

    // Read the depth and velocity vectors
    float2 velocity;
    DecodeMotionVector(LOAD_TEXTURE2D_X(_CameraMotionVectorsTexture, geometryCoords), velocity);

    // Compute the current and history UV coordinates
    float2 currentUV = (mainCoord + 0.5f) * _ScreenSize.zw;
    float2 historyUV = ((float2)(mainCoord + 0.5f) - velocity * _CurrentEffectResolution.xy) * _HistoryBufferSize.xy;

    // Fetch the current and history values and apply the exposition to it.
    float3 color = Fetch(_DenoiseInputTexture, currentUV, 0.0, _RTHandleScale.xy) * GetCurrentExposureMultiplier();
    float4 historyRaw = Fetch4(_HistoryBuffer, historyUV, 0.0, 1.0);
    float3 history = historyRaw.xyz * GetCurrentExposureMultiplier();

    // If the validity of the history is lower than a given threshold, we do not want to use it
    if (historyRaw.w < REFLECTION_HISTORY_REJECTION_THRESHOLD)
    {
        _DenoiseOutputTextureRW[COORD_TEXTURE2D_X(mainCoord)] = float4(color * GetInverseCurrentExposureMultiplier(), LOAD_TEXTURE2D_X(_DenoiseInputTexture, mainCoord).w);
        return;
    }

    float3 topLeft = Fetch(_DenoiseInputTexture, currentUV, -RADIUS, _RTHandleScale.xy) * GetCurrentExposureMultiplier();
    float3 bottomRight = Fetch(_DenoiseInputTexture, currentUV, RADIUS, _RTHandleScale.xy) * GetCurrentExposureMultiplier();

    float3 corners = 4.0 * (topLeft + bottomRight) - 2.0 * color;

    color = clamp(color, 0.0, CLAMP_MAX);

    float3 average = FastTonemap((corners + color) / 7.0);

    topLeft = FastTonemap(topLeft);
    bottomRight = FastTonemap(bottomRight);
    color = FastTonemap(color);

    float colorLuma = Luminance(color);
    float averageLuma = Luminance(average);
    float velocityLength = length(velocity);
    float nudge = lerp(4.0, 0.25, saturate(velocityLength * 100.0)) * abs(averageLuma - colorLuma);

    float3 minimum = min(bottomRight, topLeft) - nudge;
    float3 maximum = max(topLeft, bottomRight) + nudge;

    history = FastTonemap(history);

    // Clip history samples
    history = DirectClipToAABB(history, minimum, maximum);

    // Blend color & history
    // Feedback weight from unbiased luminance diff (Timothy Lottes)
    float historyLuma = Luminance(history);
    float diff = abs(colorLuma - historyLuma) / Max3(colorLuma, historyLuma, 0.2);
    float weight = 1.0 - diff;
    const float feedbackMin = 0.96;
    const float feedbackMax = 0.91;
    float feedback = lerp(feedbackMin, feedbackMax, weight * weight);

    color = FastTonemapInvert(lerp(color, history, feedback));
    color = clamp(color, 0.0, CLAMP_MAX);

    _DenoiseOutputTextureRW[COORD_TEXTURE2D_X(mainCoord)] = float4(color * GetInverseCurrentExposureMultiplier(), LOAD_TEXTURE2D_X(_DenoiseInputTexture, mainCoord).w);
}

[numthreads(REFLECTION_FILTER_TILE_SIZE, REFLECTION_FILTER_TILE_SIZE, 1)]
void CopyHistory(uint3 dispatchThreadId : SV_DispatchThreadID)
{
    UNITY_XR_ASSIGN_VIEW_INDEX(dispatchThreadId.z);

    if (any(dispatchThreadId.xy > uint2(_ScreenSize.xy)))
        return;  // Out of bounds, discard

    float4 currentColor = _DenoiseInputTexture[COORD_TEXTURE2D_X(dispatchThreadId.xy)];
    // We need to apply a step function on the blend factor to evaluate the validity of the history (if it is stricly higher than 0.0 then its valid)
    _DenoiseOutputTextureRW[COORD_TEXTURE2D_X(dispatchThreadId.xy)] = float4(currentColor.xyz, currentColor.w > 0.0 ? 1.0 : 0.0);
}

int _DenoiserFilterRadius;
TEXTURE2D(_ReflectionFilterMapping);

// Separated bilateral filter (two passes, each with 2*Radius taps)
[numthreads(REFLECTION_FILTER_TILE_SIZE, REFLECTION_FILTER_TILE_SIZE, 1)]
void BILATERAL_FILTER(uint3 dispatchThreadId : SV_DispatchThreadID, uint2 groupThreadId : SV_GroupThreadID, uint2 groupId : SV_GroupID)
{
    UNITY_XR_ASSIGN_VIEW_INDEX(dispatchThreadId.z);

    // Fetch the current pixel coordinate
    uint2 centerCoord = groupId * REFLECTION_FILTER_TILE_SIZE + groupThreadId;

    // Based on which pass of the filter we are doing, adjust the sampling direction
    #if FINAL_PASS
    const uint2 passIncr = uint2(1, 0);
    #else
    const uint2 passIncr = uint2(0, 1);
    #endif

    #if HALF_RESOLUTION
    uint2 geometrCoords = ComputeSourceCoordinates(centerCoord, _RaytracingFrameIndex);
    #else
    uint2 geometrCoords = centerCoord;
    #endif
    // Tap the central pixel coordinates
    const BilateralData center = TapBilateralData(geometrCoords);

    // Compute the effective radius we should be using for the filtering
    const float3 viewWS = GetWorldSpaceNormalizeViewDir(center.position);
    float2 mappingUV = float2(dot(viewWS, center.normal), center.roughness);
    float2 radiusScale = SAMPLE_TEXTURE2D_LOD(_ReflectionFilterMapping, s_linear_clamp_sampler, mappingUV, 0.0f).xy;
    #if FINAL_PASS
    const float radius = _DenoiserFilterRadius * radiusScale.x;
    #else
    const float radius = _DenoiserFilterRadius * radiusScale.y;
    #endif
    const float sigma = 0.5 * radius;
    const int effectiveRadius = min(sigma * 2.0, radius);

    // Store the intermediate result
    float3 finalColor = LOAD_TEXTURE2D_X(_DenoiseInputTexture, centerCoord).xyz;

    // If this pixels does not have ray traced reflections anyway, just skip it.
    if (_RaytracingReflectionMinSmoothness <= PerceptualRoughnessToPerceptualSmoothness(center.roughness))
    {
        // Initialize variables for accumulation
        float3 colorSum = float3(0.0, 0.0, 0.0);
        float wSum = 0.0;

        int2 tapCoord = centerCoord - effectiveRadius * passIncr;
        for (int r = -effectiveRadius; r <= effectiveRadius; ++r, tapCoord += passIncr)
        {
            // Make sure the pixel coord we are trying to use is in the screen (not out of bounds)
            if (tapCoord.x >= _ScreenSize.x || tapCoord.x < 0 || tapCoord.y >= _ScreenSize.y || tapCoord.y < 0)
                continue;

            #if HALF_RESOLUTION
            uint2 tapGeometryCoords = ComputeSourceCoordinates(tapCoord, _RaytracingFrameIndex);
            #else
            uint2 tapGeometryCoords = tapCoord;
            #endif
            // Compute the weight (skip computation for the center)
            const BilateralData tapData = TapBilateralData(tapGeometryCoords);
            float w = r ? gaussian(r, sigma) * ComputeBilateralWeight(center, tapData) : 1.0;
            w = _RaytracingReflectionMinSmoothness > PerceptualRoughnessToPerceptualSmoothness(tapData.roughness) ? 0.0 : w;
            colorSum += LOAD_TEXTURE2D_X(_DenoiseInputTexture, tapCoord).xyz * w;
            wSum += w;
        }
        // Normalize the result
        finalColor = colorSum / wSum;
    }

    _DenoiseOutputTextureRW[COORD_TEXTURE2D_X(centerCoord)] = float4(finalColor, LOAD_TEXTURE2D_X(_DenoiseInputTexture, centerCoord).w);
}