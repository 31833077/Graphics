#pragma kernel WorleyNoiseEvaluator

#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Common.hlsl"
#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Lighting/VolumetricLighting/VolumetricCloudsUtilities.hlsl"

// Input and output data
int _NumLayers;
int _Layer;
RWTexture2D<float4> _WorleyEvaluationOutput;

// Due to a limitation, we cannot do the whole thing in a single NxNxN dispatch so we have to do N dispatches of NxN.
[numthreads(8, 8, 1)]
void WorleyNoiseEvaluator(uint3 dispatchThreadID : SV_DispatchThreadID)
{
	// Convert the dispatch coordinates to to the generation space [0,1]x[0,1]x[0,1]
	float3 position = float3(((float2)dispatchThreadID.xy + 0.5) / _NumLayers, ((float)_Layer + 0.5) / _NumLayers);

	// Generate the perlin FBM
	float perlinFBM = lerp(1.0, EvaluatePerlinFractalBrownianMotion(position, 4.0, 7.0), 0.5);
	perlinFBM = abs(perlinFBM * 2.0 - 1.0); // billowy perlin noise

	// Generate all the worley noises that are required
	const float baseFrequence = 4.0;
	const float3 positionFrequence = position * baseFrequence;
	float worley4 = 1.0 - WorleyNoise(positionFrequence, baseFrequence * 1.0f);
	float worley8 = 1.0 - WorleyNoise(positionFrequence * 2.0f, baseFrequence * 2.0f);
	float worley16 = 1.0 - WorleyNoise(positionFrequence * 4.0f, baseFrequence * 4.0f);
	float worley32 = 1.0 - WorleyNoise(positionFrequence * 8.0f, baseFrequence * 8.0f);
	float worley64 = 1.0 - WorleyNoise(positionFrequence * 16.0f, baseFrequence * 16.0f);
	float worleyFBM = worley4 * 0.625f + worley16 * 0.25f + worley32 * 0.125f;

	// Will hold the final result
	float4 result = 0.0;
	result.x = remap(perlinFBM, 0.0, 1.0, worleyFBM, 1.0); // Perlin-Worley
	result.y = worley8 * 0.625 + worley16 * 0.25 + worley32 * 0.125; // Worley FBM 8/16/32
	result.z = worley16 * 0.625 + worley32 * 0.25 + worley64 * 0.125; // Worley FBM 16/32/64
	result.w = worley32 * 0.75 + worley64 * 0.25; // Worley FBM 32/64 (No need for the 3rd octave because its basically noise at this point)

	// Output to the render texture.
	_WorleyEvaluationOutput[dispatchThreadID.xy] = result;
}